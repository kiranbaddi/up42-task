apiVersion: apps/v1
kind: Deployment
metadata:
  name: s3www

  labels:
    app: s3www
spec:
  replicas: 1
  selector:
    matchLabels:
      app: s3www
  template:
    metadata:
      labels:
        app: s3www
    spec:
      containers:
      - name: s3www
        image: s3wwwapp.azurecr.io/s3www:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: S3WWW_ENDPOINT
          value: "http://minio:9000"
        - name: S3WWW_BUCKET
          value: "up42"
        - name: S3WWW_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: accesskey
        - name: S3WWW_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: secretkey
        command: ["/bin/sh", "-c"]
        args:
        - |
          ./s3www -endpoint $S3WWW_ENDPOINT -bucket $S3WWW_BUCKET -accessKey $S3WWW_ACCESS_KEY -secretKey $S3WWW_SECRET_KEY -address 0.0.0.0:8080
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      imagePullSecrets:
      - name: s3www-image-pull-secret
      initContainers:
      - name: wait-for-minio
        image: busybox:latest
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for MinIO to be ready..."
          until nc -z minio 9000; do
            echo "Waiting for minio:9000..."
            sleep 2
          done
          echo "MinIO is ready!"
---
apiVersion: v1
kind: Service
metadata:
  name: s3www
  namespace: default
  labels:
    app: s3www
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: s3www
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: s3www-ingress
  labels:
    app.kubernetes.io/name: s3www
spec:
  rules:
  - host: s3www.local
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: s3www
            port:
              number: 8080