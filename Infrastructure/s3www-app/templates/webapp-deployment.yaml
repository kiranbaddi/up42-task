{{- if .Values.webapp.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "s3www.fullname" . }}-webapp
  {{- if .Values.webapp.namespace }}
  namespace: {{ .Values.webapp.namespace }}
  {{- end }}
  labels:
    {{- include "s3www.labels" . | nindent 4 }}
    app.kubernetes.io/component: webapp
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "s3www.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: webapp
  template:
    metadata:
      labels:
        {{- include "s3www.labels" . | nindent 8 }}
        app.kubernetes.io/component: webapp
      {{- if .Values.webapp.annotations }}
      annotations:
        {{- range $key, $value := .Values.webapp.annotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- if .Values.webapp.environment }}
        prometheus.io/environment: {{ .Values.webapp.environment | quote }}
        {{- end }}
      {{- end }}
    spec:
      containers:
      - name: webapp
        image: "{{ .Values.webapp.image.repository }}:{{ .Values.webapp.image.tag }}"
        imagePullPolicy: {{ .Values.webapp.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.webapp.service.port }}
          name: http
        {{- if .Values.webapp.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: {{ .Values.webapp.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.webapp.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.webapp.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.webapp.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.webapp.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.webapp.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: {{ .Values.webapp.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.webapp.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.webapp.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.webapp.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.webapp.readinessProbe.failureThreshold }}
        {{- end }}
        env:
        - name: ENVIRONMENT
          value: {{ .Values.webapp.environment | default "development" | quote }}
        - name: S3WWW_ENDPOINT
          {{- if .Values.minio.namespace }}
          value: "http://minio.{{ .Values.minio.namespace }}.svc.cluster.local:{{ .Values.minio.service.port }}"
          {{- else }}
          value: "http://minio:{{ .Values.minio.service.port }}"
          {{- end }}
        - name: S3WWW_BUCKET
          value: "{{ .Values.webapp.bucket }}"
        - name: S3WWW_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "s3www.fullname" . }}-webapp-minio-secret
              key: accesskey
        - name: S3WWW_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "s3www.fullname" . }}-webapp-minio-secret
              key: secretkey
        command: ["/bin/sh", "-c"]
        args:
        - |
          ./s3www -endpoint $S3WWW_ENDPOINT -bucket $S3WWW_BUCKET -accessKey $S3WWW_ACCESS_KEY -secretKey $S3WWW_SECRET_KEY -address 0.0.0.0:{{ .Values.webapp.service.port }}
        resources:
          {{- toYaml .Values.webapp.resources | nindent 10 }}
      imagePullSecrets:
      {{- if .Values.webapp.imagePullSecret.enabled }}
      - name: {{ .Values.webapp.imagePullSecret.name }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: wait-for-minio
        image: busybox:latest
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for MinIO to be ready..."
          {{- if .Values.minio.namespace }}
          until nc -z minio.{{ .Values.minio.namespace }}.svc.cluster.local {{ .Values.minio.service.port }}; do
            echo "Waiting for minio.{{ .Values.minio.namespace }}.svc.cluster.local:{{ .Values.minio.service.port }}..."
          {{- else }}
          until nc -z minio {{ .Values.minio.service.port }}; do
            echo "Waiting for minio:{{ .Values.minio.service.port }}..."
          {{- end }}
            sleep 2
          done
          echo "MinIO is ready!"
---
{{- if .Values.minio.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "s3www.fullname" . }}-webapp-minio-secret
  {{- if .Values.webapp.namespace }}
  namespace: {{ .Values.webapp.namespace }}
  {{- else }}
  namespace: {{ .Release.Namespace }}
  {{- end }}
  labels:
    {{- include "s3www.labels" . | nindent 4 }}
    app.kubernetes.io/component: webapp-minio-credentials
type: Opaque
data:
  accesskey: {{ .Values.minio.credentials.accessKey | b64enc }}
  secretkey: {{ .Values.minio.credentials.secretKey | b64enc }}
{{- end }}
{{- end }}
