
services:
  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=$MINIO_ACCESS_KEY
      - MINIO_ROOT_PASSWORD=$MINIO_SECRET_KEY
      - MINIO_DEFAULT_BUCKETS=$MINIO_BUCKET
    networks:
      - up42-network   
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"

  mc-client:
    image: minio/mc
    entrypoint: |
      /bin/sh -c "
      until mc alias set myminio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY} --insecure; do
        echo 'Waiting for MinIO to be ready...'
        sleep 5
      done
      echo 'Setting up MinIO client...'
      mc alias set myminio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY} --insecure && \
      echo 'Creating bucket if it does not exist...' && \
      mc mb myminio/${MINIO_BUCKET} --ignore-existing --insecure && \
      echo 'Uploading file to bucket...' && \
      mc cp /local-files/${FILE_NAME} myminio/${MINIO_BUCKET}/ --insecure && \
      echo 'File uploaded successfully!' && \
      echo 'Listing bucket contents:' && \
      mc ls myminio/${MINIO_BUCKET} --insecure
      "
    environment:
      MINIO_ACCESS_KEY: $MINIO_ACCESS_KEY
      MINIO_SECRET_KEY: $MINIO_SECRET_KEY
      MINIO_BUCKET: $MINIO_BUCKET
      FILE_NAME: $FILE_NAME
    volumes:
      - ./:/local-files  
      - minio_data:/data
    networks:
      - up42-network
    depends_on:
      - minio

  s3www:    
    build:
      context: .
      dockerfile: Dockerfile
    container_name: s3www
    environment:
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=$MINIO_ACCESS_KEY
      - MINIO_SECRET_KEY=$MINIO_SECRET_KEY
      - MINIO_BUCKET=$MINIO_BUCKET
    command: ["-endpoint", "http://minio:9000", "-accessKey", "$MINIO_ACCESS_KEY", "-secretKey", "$MINIO_SECRET_KEY", "-bucket", "$MINIO_BUCKET", "-address", "0.0.0.0:8080"]
    networks:
      - up42-network
    ports:
      - "8080:8080"
    depends_on:
      - mc-client

volumes:
  minio_data:
    driver: local
networks:
  up42-network:
    driver: bridge  